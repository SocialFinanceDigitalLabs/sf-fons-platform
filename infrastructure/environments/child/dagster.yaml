AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # Project-level Parameters
  ProjectName:
    Type: String
    Default: Dagster
    Description: Name of the platform. Used to name things like database, etc.

  # Environment Parameters
  Environment:
    Type: String
    Description: The name for the environment. Expected values are dev, staging, prod
  AWSRegion:
    Type: String
    Default: eu-west-2
    Description: Region to use for the setup

  # ECS Parameters
  DaemonCpu:
    Type: String
    Default: 256
    Description: CPU to use for Daemon
  DagitCpu:
    Type: String
    Default: 256
    Description: CPU to use for Dagit
  CodeServerCpu:
    Type: String
    Default: 256
    Description: CPU to use for Code Server
  DaemonMemory:
    Type: String
    Default: 512
    Description: Memory to use for Daemon
  DagitMemory:
    Type: String
    Default: 512
    Description: Memory to use for Dagit
  CodeServerMemory:
    Type: String
    Default: 512
    Description: CPU to use for the Code Server
  DaemonImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  DagitImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  UserCode1ImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  DaemonLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  DagitLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  CodeServerLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  HealthCheckGracePeriodSeconds:
    Type: String
    Default: 30
    Description: ??
  CodeServerPipelineFolder:
    Type: String
    Default: "pipeline"
    Description: What folder the repo exists in on the code server
  CodeServerPipelineRepoLocation:
    Type: String
    Default: "repository.py"
    Description: Location of the repo.py file that controls the repository

  # Database Parameters
  DBStorageSize:
    Type: Number
    Default: 20
    Description: How many GB the db should be allocated for storage
  DBInstanceClass:
    Type: String
    Default: db.serverless
    Description: Type of resources for the database to use. See https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Types.serverless-v2
  DBEngine:
    Type: String
    Default: aurora-postgresql
    Description: Type of database to run. Suggested postgres or aurora-postgresql
  DBStorageType:
    Type: String
    Default: gp2
    Description: Type of storage to run the database on (standard or gp2 are the usual options)
  DBName:
    Type: String
    Default: postgres
    Description: The name to be used for the database
  DBPort:
    Type: String
    Default: 3306
    Description: The port to use to connect to the database
  DBUsername:
    Type: String
    Default: postgres
    Description: Username to use with the database
  DBMinCapacity:
    Type: String
    Default: 0.5
    Description: Minimum capacity is 0.5
  DBMaxCapacity:
    Type: String
    Default: 1
    Description: Minimum capacity is 0.5

  # Networking Parameters
  DatabaseSubnetGroup:
    Type: String
    Description: Database Subnet Group ID
  PrivateSubnet1:
    Type: String
    Description: ARN for private subnet 1
  PrivateSubnet2:
    Type: String
    Description: ARN for private subnet 2
  PublicSubnet1:
    Type: String
    Description: ARN for public subnet 1
  PublicSubnet2:
    Type: String
    Description: ARN for public subnet 2
  DaemonSecurityGroup:
    Type: String
    Description: Security Group ARN to use for the Daemon
  DagitSecurityGroup:
    Type: String
    Description: Security Group ARN to use for the Dagit Interface
  CodeServerSecurityGroup:
    Type: String
    Description: Security Group ARN to use for the Code Servers
  DatabaseSecurityGroup:
    Type: String
    Description: Security Group ARN to use for the Database
  MyPrivateServiceDiscoveryNamespace:
    Type: String
    Description: Namespace for private network.

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Resources:
  # ECS Definition
  DagitTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  DagitTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  DaemonTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  DaemonTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  CodeServerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  CodeServerTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  DagsterCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DagsterDaemonTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DagsterDaemonTask
      ExecutionRoleArn: !GetAtt DaemonTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt DaemonTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref DaemonCpu
      Memory: !Ref DaemonMemory
      ContainerDefinitions:
        - Name: dagster-daemon
          Image: !Ref DaemonImagePath
          Memory: !Ref DaemonMemory
          EntryPoint:
            - "dagster-daemon"
            - "run"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "dagster-daemon-container"
              awslogs-region: !Ref AWSRegion
              awslogs-create-group: true
              awslogs-stream-prefix: "dagster"
          Environment:
            - Name: DAGSTER_HOME
              Value: "/opt/dagster/dagster_home/"
            - Name: DAGSTER_POSTGRES_HOST
              Value: !GetAtt DagsterDatabaseCluster.Endpoint.Address
            - Name: DAGSTER_POSTGRES_USER
              Value: !Ref DBUsername
            - Name: DAGSTER_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: DAGSTER_POSTGRES_DB
              Value: !Ref DBName
            - Name: DAGSTER_POSTGRES_PORT
              Value: !Ref DBPort
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DagitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DagitTask
      ExecutionRoleArn: !GetAtt DagitTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt DagitTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref DagitCpu
      Memory: !Ref DagitMemory
      ContainerDefinitions:
        - Name: dagit
          Image: !Ref DagitImagePath
          Memory: 512
          EntryPoint:
            - "dagit"
            - "-h"
            - "0.0.0.0"
            - "-p"
            - "3000"
            - "-w"
            - "workspace.yaml"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "dagit-container"
              awslogs-region: !Ref AWSRegion
              awslogs-create-group: true
              awslogs-stream-prefix: "dagit"
          Environment:
            - Name: DAGSTER_POSTGRES_HOST
              Value: !GetAtt DagsterDatabaseCluster.Endpoint.Address
            - Name: DAGSTER_POSTGRES_USER
              Value: !Ref DBUsername
            - Name: DAGSTER_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: DAGSTER_POSTGRES_DB
              Value: !Ref DBName
            - Name: DAGSTER_POSTGRES_PORT
              Value: !Ref DBPort
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  CodeServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: CodeServerTask
      ExecutionRoleArn: !GetAtt CodeServerTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt CodeServerTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref CodeServerCpu
      Memory: !Ref CodeServerMemory
      ContainerDefinitions:
        - Name: user_code
          Image: !Ref UserCode1ImagePath
          Memory: 512
          PortMappings:
            - ContainerPort: 4000
              Protocol: tcp
              Name: 4000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "user-code-container"
              awslogs-region: !Ref AWSRegion
              awslogs-create-group: true
              awslogs-stream-prefix: "dagster-user-code"
          Environment:
            - Name: CODE_FOLDER
              Value: !Ref CodeServerPipelineFolder
            - Name: REPO_LOCATION
              Value: !Ref CodeServerPipelineRepoLocation
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DagsterDaemonGroupDescription:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "dagster-daemon-container"

  DagitGroupDescription:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "dagit-container"

  UserCodeGroupDescription:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "user-code-container"

  DagsterDaemonService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, DagsterDaemonTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: 1
      LaunchType: !Ref DaemonLaunchType
      TaskDefinition: !Ref DagsterDaemonTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref DaemonSecurityGroup
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref MyPrivateServiceDiscoveryNamespace
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DagitService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, DagitTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: !If [IsProd, 0, 1]
      LaunchType: !Ref DagitLaunchType
      TaskDefinition: !Ref DagitTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
           - !Ref PublicSubnet1
           - !Ref PublicSubnet2
          SecurityGroups:
           - !Ref DagitSecurityGroup
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref MyPrivateServiceDiscoveryNamespace
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  CodeServerService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, CodeServerTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: 1
      LaunchType: !Ref CodeServerLaunchType
      TaskDefinition: !Ref CodeServerTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref CodeServerSecurityGroup
      ServiceConnectConfiguration:
        Enabled: true
        Namespace: !Ref MyPrivateServiceDiscoveryNamespace
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: "dagster-daemon-code-service-map"
            awslogs-region: !Ref AWSRegion
            awslogs-create-group: true
            awslogs-stream-prefix: "dagster"
        Services:
          - DiscoveryName: user_code
            PortName: 4000
            ClientAliases:
              - DnsName: user_code
                Port: 4000
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment


  # Database Definition
  DagsterDatabaseCluster:
    Type: 'AWS::RDS::DBCluster'
    DeletionPolicy: Delete
    Properties:
      Engine: !Ref DBEngine
      DBClusterIdentifier: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      StorageEncrypted: true
      ServerlessV2ScalingConfiguration:
        MinCapacity: !Ref DBMinCapacity
        MaxCapacity: !Ref DBMaxCapacity
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DagsterDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: !Ref DBEngine
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref DagsterDatabaseCluster
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  DBPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBPassword
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        IncludeSpace: false
        PasswordLength: 20
        RequireEachIncludedType: true
        ExcludeCharacters: "\"'@/\\"

Outputs:
  DatabaseEndpointAddress:
    Description: Endpoint Address for the Database
<<<<<<< HEAD
    Value: !GetAtt DagsterDatabaseCluster.Endpoint.Address
=======
    Value: !GetAtt DagsterDatabaseCluster.Endpoint.Address
>>>>>>> 1ef8c9af24107d2ea1e57f99bd5c563ae00483e8
