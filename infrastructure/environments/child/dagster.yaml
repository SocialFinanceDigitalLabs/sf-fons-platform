AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # Project-level Parameters
  ProjectName:
    Type: String
    Default: Dagster
    Description: Name of the platform. Used to name things like database, etc.
  IsProduction:
    Type: String
    Default: false
    Description: Is this production or not. Production may have different settings (e.g. more locked down areas, etc)
  # Networking Parameters
  DagitHostPort:
    Type: String
    Default: "3000"
    Description: Port the dagit Instance is hosted
  # Environment Parameters
  AWSRegion:
    Type: String
    Default: eu-west-2
    Description: Region to use for the setup
  AWSAccountId:
    Type: String
    Description: The Account Id for the AWS Account
  Environment:
    Type: String
    Description: The name for the environment
  # ECS Parameters
  DaemonImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  DagitImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  UserCode1ImagePath:
    Type: String
    Default: ""
    Description: Docker hub image:Version or ECR URL in format aws_account_id.dkr.ecr.region.amazonaws.com/my-repository:latest
  DaemonMemory:
    Type: String
    Default: "512"
    Description: Memory to allocate for the Dagster Daemon
  DagitMemory:
    Type: String
    Default: "512"
    Description: Memory to allocate for the Dagster Dagit Interface
  DaemonLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  DagitLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  CodeServerLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  DagitInstanceType:
    Type: String
    Default: t2.micro
    Description: Enter instance size for the Dagit Web Interface. Default is t2.micro.
  DaemonInstanceType:
    Type: String
    Default: t2.micro
    Description: Enter instance size fpr tje Dagster Daemon. Default is t2.micro
  DagitImage:
    Type: String
    Description: The name of the dagster ecr image to use for dagit
  HealthCheckGracePeriodSeconds:
    Type: String
    Default: 30
    Description: ??
  CodeServerPipelineFolder:
    Type: String
    Default: "pipeline"
    Description: What folder the repo exists in on the code server
  CodeServerPipelineRepoLocation:
    Type: String
    Default: "repository.py"
    Description: Location of the repo.py file that controls the repository
  # Database Parameters
  DBStorageSize:
    Type: Number
    Default: 2
    Description: How many GB the db should be allocated for storage
  DBInstanceClass:
    Type: String
    Default: db.t2.micro
    Description: Type of resources for the database to use
  DBEngine:
    Type: String
    Default: aurora-postgres
    Description: Type of database to run. Suggested postgres or aurora-postgresql
  DBStorageType:
    Type: String
    Default: gp2
    Description: Type of storage to run the database on (standard or gp2 are the usual options)
  DBName:
    Type: String
    Default: postgres
    Description: The name to be used for the database
Resources:
  # Networking Definition
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Project
          Value: !Sub ProjectName
        - Key: Environment
          Value: !Ref Environment
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # --- [Public Network Definition]
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
      #InstanceId: !Ref DagitInstance
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWSRegion}a"
      VpcId: !Ref VPC
      CidrBlock: 10.0.50.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  DagitSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-Dagit-Security-Group-${Environment}"
      GroupDescription: "Enable HTTP access via port 80"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: !Ref DagitHostPort
          CidrIp: 0.0.0.0/0

  # --- [Private Network Definition]
  PrivateNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC
  PrivateNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt PrivateNatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
          - Key: Project
            Value: !Ref ProjectName
          - Key: Environment
            Value: !Ref Environment
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWSRegion}a"
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
  DaemonSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-Daemon-Security-Group-${Environment}"
      GroupDescription: "Security Group for Dagster Daemon"
      VpcId: !Ref VPC
  PrivateSubnetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref PrivateNatGateway

  # --- [Database Network Definition]
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWSRegion}a"
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: false
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "${AWSRegion}b"
      VpcId: !Ref VPC
      CidrBlock: 10.0.30.0/24
      MapPublicIpOnLaunch: false
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: DatabaseSubnetGroup
      DBSubnetGroupDescription: A subnet group used for the database
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-Database-Security-Group-${Environment}"
      VpcId: !Ref VPC
      GroupDescription: "Database Access"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: "0.0.0.0/0"

      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # ECS Definition
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  DagsterCluster:
    Type: AWS::ECS::Cluster
  DagsterDaemonTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DagsterDaemonTask
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: dagster-daemon
          Image: !Ref DaemonImagePath
          Memory: !Ref DaemonMemory
          EntryPoint:
            - "dagster-daemon"
            - "run"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: DAGSTER_HOME
              Value: "/opt/dagster"
            - Name: DAGSTER_POSTGRES_HOST
              Value: !GetAtt DagsterDatabase.Endpoint.Address
            - Name: DAGSTER_POSTGRES_USER
              Value: !Ref DBUsername
            - Name: DAGSTER_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: DAGSTER_POSTGRES_DB
              Value: !Ref DBName
  DagitTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DagitTask
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: dagit
          Image: !Ref DagitImagePath
          Memory: 512
          EntryPoint:
            - "dagit"
            - "-h"
            - "0.0.0.0"
            - "-p"
            - "3000"
            - "-w"
            - "workspace.yaml"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: DAGSTER_POSTGRES_HOST
              Value: !GetAtt DagsterDatabase.Endpoint.Address
            - Name: DAGSTER_POSTGRES_USER
              Value: !Ref DBUsername
            - Name: DAGSTER_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: DAGSTER_POSTGRES_DB
              Value: !Ref DBName
  CodeServerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: CodeServerTask
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: code-server
          Image: !Ref UserCode1ImagePath
          Memory: 512
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: DAGSTER_POSTGRES_HOST
              Value: !GetAtt DagsterDatabase.Endpoint.Address
            - Name: DAGSTER_POSTGRES_USER
              Value: !Ref DBUsername
            - Name: DAGSTER_POSTGRES_PASSWORD
              Value: !Ref DBPassword
            - Name: DAGSTER_POSTGRES_DB
              Value: !Ref DBName
            - Name: CODE_FOLDER
              Value: !Ref CodeServerPipelineFolder
            - Name: REPO_LOCATION
              Value: !Ref CodeServerPipelineRepoLocation

  DagsterDaemonService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, DagsterDaemonTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: 1
      LaunchType: !Ref DaemonLaunchType
      TaskDefinition: !Ref DagsterDaemonTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetA
          SecurityGroups: !Ref DaemonSecurityGroup
  DagitService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, DagitTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: 1
      LaunchType: !Ref DagitLaunchType
      TaskDefinition: !Ref DagitTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PublicSubnetA
          SecurityGroups: !Ref DagitSecurityGroup
  CodeServerService:
    Type: AWS::ECS::Service
    DependsOn: [ DagsterCluster, CodeServerTaskDefinition ]
    Properties:
      Cluster: !Ref DagsterCluster
      DesiredCount: 1
      LaunchType: !Ref CodeServerLaunchType
      TaskDefinition: !Ref CodeServerTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref PrivateSubnetA
          SecurityGroups: !Ref DaemonSecurityGroup



  # Database Definition
  DagsterDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBStorageSize
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref DBEngine
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      PubliclyAccessible: false
      VPCSecurityGroups: !GetAtt DatabaseSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
    DeletionPolicy: Snapshot
  DBPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBPassword
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        IncludeSpace: false
        PasswordLength: 20
        RequireEachIncludedType: true
        ExcludeCharacters: "\"'@/\\"
  DBUsername:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: DBUsername
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: true
        ExcludePunctuation: true
        ExcludeUppercase: false
        IncludeSpace: false
        PasswordLength: 10
        RequireEachIncludedType: true
