AWSTemplateFormatVersion: 2010-09-09
Description:  This template hooks in the front-end and connects with s3

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: The name for the environment. Expected values are dev, staging, prod
  WebsiteUrl:
    Type: String
    Description: The URL of the platform
  FrontendVpcCIDR:
    Type: String
    Default: 10.192.50.0/16
    Description: CIDR rule to use for the front end vpc
  ProjectName:
    Type: String
    Default: fons
    Description: Name of the platform. Used to name things like database, etc.
  FrontendLaunchType:
    Type: String
    Default: "FARGATE"
    Description: Either FARGATE or EC2 type can be used
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.60.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.70.0/24
  FrontendRepoUri:
    Description: The ECR or Docker Repo to pull the image from
    Type: String
  FrontendRepoVersion:
    Description: The version of the repo image to pull
    Type: String
    Default: "latest"
  FrontendCpu:
    Type: String
    Default: 256
    Description: CPU to use for the Frontend
  FrontendMemory:
    Type: String
    Default: 512
    Description: Memory to use for the Frontend
  DataStoreLocation:
    Type: String
    Description: Location the Frontend should look to save and load uploaded and processed files
  DataStoreLocationArn:
    Type: String
    Description: Arn of the bucket which stores the uploaded and processed files
  DagsterVpc:
    Type: String
    Description: ID of the VPC used by Dagster
  SecretKey:
    Type: String
    Description: Secret Key to be used with Django setup

Conditions:
  IsDevelopment:    # Dagit should be inaccessible in Production
    Fn::Or:
      - Fn::Equals:
          - !Ref Environment
          - "dev"
      - Fn::Equals:
          - !Ref Environment
          - "staging"

Resources:
  # Public Internet Setup
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Scheme: internet-facing
      Subnets:
        - !Ref FrontendPublicSubnet1
        - !Ref FrontendPublicSubnet2
      SecurityGroups:
        - !Ref FrontendSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FrontEndTrafficGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref FrontendVpc

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 200
            ContentType: text/plain
            MessageBody: "Success!"
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  # Networking Configuration
  FrontendVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref FrontendVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

  FrontendInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  FrontendInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref FrontendInternetGateway
      VpcId: !Ref FrontendVpc


  FrontendPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FrontendVpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet for Website (AZ1)

  FrontendPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FrontendVpc
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Public Subnet for Website (AZ2)

  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FrontendVpc
      Tags:
        - Key: Name
          Value: !Sub ${Environment} Frontend Routes

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: FrontendVpc
    Properties:
      GroupName: !Sub "frontend-sg-${Environment}"
      GroupDescription: "Security group for the front end website"
      VpcId: !Ref FrontendVpc
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 8000
          IpProtocol: tcp

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: 'Gateway'
      VpcId: !Ref FrontendVpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - !Ref DataStoreLocationArn
      RouteTableIds:
        - !Ref FrontendRouteTable


  # IAM Configuration
  FrontendTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  FrontendTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticContainerRegistryPublicReadOnly
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  # ECS Configuration
  FrontendCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  FrontEndService:
    Type: AWS::ECS::Service
    DependsOn: [ FrontendCluster, FrontEndTaskDefinition ]
    Properties:
      Cluster: !Ref FrontendCluster
      DesiredCount: 1
      LaunchType: !Ref FrontendLaunchType
      TaskDefinition: !Ref FrontEndTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref FrontendPublicSubnet1
            - !Ref FrontendPublicSubnet2
          SecurityGroups:
            - !Ref FrontendSecurityGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  FrontEndTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DagitTask
      ExecutionRoleArn: !GetAtt FrontendTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt FrontendTaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref FrontendCpu
      Memory: !Ref FrontendMemory
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub "${FrontendRepoUri}:${FrontendRepoVersion}"
          Memory: 512
          EntryPoint:
            - "gunicorn"
            - "filesystem.wsgi:application"
            - "--bind 0.0.0.0:8000"
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: "frontend-container"
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-stream-prefix: "frontend"
          Environment:
            - Name: DJANGO_SECRET_KEY
              Value: !Ref SecretKey
            - Name: SF_FS_BACKEND_URL
              Value: !Ref DataStoreLocation
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

