AWSTemplateFormatVersion: 2010-09-09
Description:  |
  This template creates buckets to be used by the application for the storage of data and sharing the data
  with the central organisation.

Parameters:
  Environment:
    Type: String
    Description: The name for the environment (e.g. dev, staging, prod). LOWER CASE, NO SPACES

  AppName:
    Type: String
    Default: sfdata
    Description: The name for the application or instance.  LOWER CASE, NO SPACES

  OrganisationName:
    Type: String
    Description: The name for the organisation this is for (to make sure naming is unique). LOWER CASE, NO SPACES

  AutoFileDeletion:
    Type: String
    Default: 2190
    Description: How long before files are automatically deleted (default 6 years)

  WebsiteConnectionOriginUrl:
    Type: String
    Default: "*"
    Description: |
      Url of the website that will be accessing this bucket (e.g. from a frontend implementation). Connection
      is only allowed from an ec2/ecs reousrce on the same account.

  EnableCrossAccountAccess:
    Type: String
    AllowedValues: [ true, false ]
    Default: true
    Description: Enable cross-account access to the shared S3 bucket

Conditions:
  EnableCrossAccountAccessCondition:
    Fn::Equals:
      - Ref: EnableCrossAccountAccess
      - true

Resources:
  ExternalDataStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-external-data-store-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  WorkspaceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-workspace-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
          Rules:
            - Id: DeleteContentAfter1Day
              ExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
            - Id: AbortIncompleteMultipartUpload
              NoncurrentVersionExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'

  EgressBackup:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-egress-${OrganisationName}-${Environment}-backup"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled

  EgressBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-egress-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
          Rules:
            - Id: DeleteContentAfter1Day
              ExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
            - Id: AbortIncompleteMultipartUpload
              NoncurrentVersionExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - !Ref WebsiteConnectionOriginUrl
            Id: SharedRule
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt
          - EgressBucketBackupRole
          - Arn
        Rules:
          - Destination:
              Bucket: !GetAtt EgressBackup.Arn
              StorageClass: STANDARD
            Id: Backup
            Prefix: ''
            Status: Enabled

  EgressBucketBackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com

  EgressBucketBackupPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetReplicationConfiguration'
              - 's3:ListBucket'
            Effect: Allow
            Resource: !GetAtt EgressBucket.Arn
          - Action:
              - 's3:GetObjectVersion'
              - 's3:GetObjectVersionAcl'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt EgressBucket.Arn
                  - "/*"
          - Action:
              - 's3:ReplicateObject'
              - 's3:ReplicateDelete'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt EgressBackup.Arn
                  - "/*"
      PolicyName: EgressBucketBackupPolicy
      Roles:
        - !Ref EgressBucketBackupRole

  EgressBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EgressBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref EgressBucket, "/*" ] ]

  ExternalDataStoreStorageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AppName}-external-data-store-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the external data store s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AppName}-external-data-store-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${ExternalDataStoreBucket.Arn}/*"

  WorkspaceStorageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AppName}-workspace-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the workspace store s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AppName}-workspace-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${WorkspaceBucket.Arn}/*"

  EgressStorageRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableCrossAccountAccessCondition
    Properties:
      RoleName: !Sub "${AppName}-egress-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the egress store s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AppName}-egress-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${EgressBucket.Arn}/*"

Outputs:
  ExternalDataStoreBucketName:
    Value: !Ref ExternalDataStoreBucket
    Description: Name of the external data Amazon S3 bucket with a lifecycle configuration.
  ExternalDataStoreBucketArn:
    Value: !GetAtt ExternalDataStoreBucket.Arn
    Description: ARN of the external data store Amazon S3 bucket with a lifecycle configuration
  ExternalDataStoreRoleARN:
    Value: !GetAtt ExternalDataStoreStorageRole.Arn
    Description: ARN of the role used to access the data store bucket
  WorkspaceBucketName:
    Value: !Ref WorkspaceBucket
    Description: Name of the workspace Amazon S3 bucket with a lifecycle configuration.
  WorkspaceBucketArn:
    Value: !GetAtt WorkspaceBucket.Arn
    Description: ARN of the workspace Amazon S3 bucket with a lifecycle configuration.
  WorkspaceRoleARN:
    Value: !GetAtt WorkspaceStorageRole.Arn
    Description: ARN of the role used to access the data store bucket
  EgressBucketName:
    Value: !Ref EgressBucket
    Description: Name of the egress Amazon S3 bucket with a lifecycle configuration.
  EgressBucketArn:
    Value: !GetAtt EgressBucket.Arn
    Description: Arn of the egress Amazon S3 bucket with a lifecycle configuration.
  EgressRoleARN:
    Value: !GetAtt EgressStorageRole.Arn
    Description: ARN of the role used to access the egress bucket
