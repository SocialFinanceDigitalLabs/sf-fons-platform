AWSTemplateFormatVersion: 2010-09-09
Description:  |
  This template creates buckets to be used by the application for the storage of data and sharing the data
  with the central organisation.

Parameters:
  Environment:
    Type: String
    Description: The name for the environment (e.g. dev, staging, prod). LOWER CASE, NO SPACES

  AppName:
    Type: String
    Default: fons
    Description: The name for the application or instance.  LOWER CASE, NO SPACES

  OrganisationName:
    Type: String
    Description: The name for the organisation this is for (to make sure naming is unique). LOWER CASE, NO SPACES

  AutoFileDeletion:
    Type: String
    Default: 2190
    Description: How long before files are automatically deleted (default 6 years)

  WebsiteConnectionOriginUrl:
    Type: String
    Default: "https://{}.dataplatform.org.uk"
    Description: |
      Url of the website that will be accessing this bucket (e.g. from a frontend implementation). Connection
      is only allowed from an ec2/ecs reousrce on the same account.

  EnableCrossAccountAccess:
    Type: String
    AllowedValues: [ true, false ]
    Default: true
    Description: Enable cross-account access to the shared S3 bucket

  OrgAccountRoleArn:
    Type: String
    Description: Account Organisation role that will be allowed to access the shared storage

Conditions:
  EnableCrossAccountAccessCondition:
    Fn::Equals:
      - Ref: EnableCrossAccountAccess
      - true

Resources:
  DataStoreBackup:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-data-store-${OrganisationName}-${Environment}-backup"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            ExpirationInDays: !Ref AutoFileDeletion
            Transitions:
              - TransitionInDays: 1
                StorageClass: GLACIER


  DataStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-data-store-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
          Rules:
            - Id: AutoDeleteContent
              ExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
            - Id: AbortIncompleteMultipartUpload
              NoncurrentVersionExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - !Ref WebsiteConnectionOriginUrl
            Id: IngressRule
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt DataStoreBucketBackupRole.Arn
        Rules:
          - Destination:
              Bucket: !GetAtt DataStoreBackup.Arn
              StorageClass: STANDARD
            Id: Backup
            Prefix: ''
            Status: Enabled
#            SourceSelectionCriteria:
#              ReplicaModifications:
#                Status: Disabled

  DataStoreBucketBackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com

  DataStoreBucketBackupPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetReplicationConfiguration'
              - 's3:ListBucket'
            Effect: Allow
            Resource: !GetAtt DataStoreBucket.Arn
          - Action:
              - 's3:GetObjectVersion'
              - 's3:GetObjectVersionAcl'
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt DataStoreBucket.Arn
                  - "/*"
          - Action:
              - 's3:ReplicateObject'
              - 's3:ReplicateDelete'
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt DataStoreBackup.Arn
                  - "/*"
      PolicyName: DataStoreBucketBackupPolicy
      Roles:
        - !Ref DataStoreBucketBackupRole

  WorkspaceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-workspace-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
          Rules:
            - Id: DeleteContentAfter1Day
              ExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
            - Id: AbortIncompleteMultipartUpload
              NoncurrentVersionExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'

  SharedBackup:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-shared-${OrganisationName}-${Environment}-backup"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            ExpirationInDays: !Ref AutoFileDeletion
            Transitions:
              - TransitionInDays: 1
                StorageClass: GLACIER

  SharedBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-shared-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
          Rules:
            - Id: DeleteContentAfter1Day
              ExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
            - Id: AbortIncompleteMultipartUpload
              NoncurrentVersionExpirationInDays: !Ref AutoFileDeletion
              Status: 'Enabled'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - !Ref WebsiteConnectionOriginUrl
            Id: SharedRule
      VersioningConfiguration:
        Status: Enabled
      ReplicationConfiguration:
        Role: !GetAtt SharedBucketBackupRole.Arn
        Rules:
          - Destination:
              Bucket: !GetAtt SharedBackup.Arn
              StorageClass: STANDARD
            Id: Backup
            Prefix: ''
            Status: Enabled

  SharedBucketBackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com

  SharedBucketBackupPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetReplicationConfiguration'
              - 's3:ListBucket'
            Effect: Allow
            Resource: !GetAtt SharedBucket.Arn
          - Action:
              - 's3:GetObjectVersion'
              - 's3:GetObjectVersionAcl'
              - 's3:GetObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt SharedBucket.Arn
                  - "/*"
          - Action:
              - 's3:ReplicateObject'
              - 's3:ReplicateDelete'
              - 's3:GetObject'
              - 's3:PutObject'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt SharedBackup.Arn
                  - "/*"
      PolicyName: SharedBucketBackupPolicy
      Roles:
        - !Ref SharedBucketBackupRole

  SharedBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SharedBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: "s3:GetObject"
            Resource:
              - !Sub "${SharedBucket.Arn}/*"
          - Effect: Allow
            Principal:
              AWS: !Ref OrgAccountRoleArn
            Action:
              - "s3:ListBucketMultipartUploads"
              - "s3:GetObjectVersionTagging"
              - "s3:ListBucketVersions"
              - "s3:GetObjectAttributes"
              - "s3:PutObjectVersionTagging"
              - "s3:ListBucket"
              - "s3:GetBucketAcl"
              - "s3:GetObjectVersionAttributes"
              - "s3:PutObject"
              - "s3:GetObjectAcl"
              - "s3:GetObject"
              - "s3:GetObjectVersionAcl"
              - "s3:GetObjectTagging"
              - "s3:PutObjectTagging"
              - "s3:GetBucketLocation"
              - "s3:GetObjectVersion"
            Resource:
              - !Sub "${SharedBucket.Arn}/*"
              - !GetAtt SharedBucket.Arn


  IngressStorageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AppName}-ingress-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the ingress s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AppName}-ingress-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${DataStoreBucket.Arn}/*"

  WorkspaceStorageRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AppName}-workspace-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the workspace store s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AppName}-workspace-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource: !Sub "${WorkspaceBucket.Arn}/*"

  SharedStorageRole:
    Type: 'AWS::IAM::Role'
    Condition: EnableCrossAccountAccessCondition
    Properties:
      RoleName: !Sub "${AppName}-shared-user-${OrganisationName}-${Environment}"
      Description: "Role that allows a user to access the workspace store s3 Bucket"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      Policies:
        - PolicyName: !Sub "${AppName}-shared-user-access-${OrganisationName}-${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:DeleteObject"
                Resource:
                  - !Sub "${SharedBucket.Arn}/*"

  LambdaCodeBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AppName}-lambda-code-${OrganisationName}-${Environment}"
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

Outputs:
  IngressBucketName:
    Value: !Ref DataStoreBucket
    Description: Name of the ingress Amazon S3 bucket with a lifecycle configuration.
  IngressBucketArn:
    Value: !GetAtt DataStoreBucket.Arn
    Description: ARN of the ingress store Amazon S3 bucket with a lifecycle configuration
  IngressRoleARN:
    Value: !GetAtt IngressStorageRole.Arn
    Description: ARN of the role used to access the ingress store bucket
  WorkspaceBucketName:
    Value: !Ref WorkspaceBucket
    Description: Name of the workspace Amazon S3 bucket with a lifecycle configuration.
  WorkspaceBucketArn:
    Value: !GetAtt WorkspaceBucket.Arn
    Description: ARN of the workspace Amazon S3 bucket with a lifecycle configuration.
  WorkspaceRoleARN:
    Value: !GetAtt WorkspaceStorageRole.Arn
    Description: ARN of the role used to access the data store bucket
  SharedBucketName:
    Value: !Ref SharedBucket
    Description: Name of the shared Amazon S3 bucket with a lifecycle configuration.
  SharedBucketArn:
    Value: !GetAtt SharedBucket.Arn
    Description: Arn of the shared Amazon S3 bucket with a lifecycle configuration.
  SharedRoleARN:
    Value: !GetAtt SharedStorageRole.Arn
    Description: ARN of the role used to access the data store bucket
  LambdaCodeBucket:
    Value: !Ref LambdaCodeBucket
    Description: Name of the Code Bucket to store lambda functions